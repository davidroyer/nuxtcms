{                 19:45:38
  isStatic: false,
  isDev: true,
  isHMR: false,
  app: {
    router: VueRouter {
      app: [Vue],
      apps: [Array],
      options: [Object],
      beforeHooks: [],
      resolveHooks: [],
      afterHooks: [],
      matcher: [Object],
      fallback: false,
      mode: 'abstract',
      history: [AbstractHistory]
    },
    store: Store {
      _committing: false,
      _actions: [Object],
      _actionSubscribers: [],
      _mutations: [Object],
      _wrappedGetters: [Object: null prototype] {},
      _modules: [ModuleCollection],
      _modulesNamespaceMap: [Object: null prototype] {},
      _subscribers: [],
      _watcherVM: [Vue],
      dispatch: [Function: boundDispatch],
      commit: [Function: boundCommit],
      strict: true,
      getters: {},
      _vm: [Vue],
      '$router': [VueRouter],
      registerModule: [Function],
      app: [Circular],
      '$cmsApi': [Object],
      '$vStore': [Object],
      '$postTest': [],
      '$getPosts': [Function]
    },
    nuxt: {
      defaultTransition: [Object],
      transitions: [Array],
      setTransitions: [Function: setTransitions],
      err: null,
      dateErr: null,
      error: [Function: error]
    },
    head: {
      meta: [],
      link: [],
      style: [],
      script: []
    },
    render: [Function: render],
    data: [Function: data],
    beforeCreate: [Function: beforeCreate],
    created: [Function: created],
    mounted: [Function: mounted],
    watch: {
      'nuxt.err': 'errorChanged'
    },
    computed: {
      isOffline: [Function: isOffline]
    },
    methods: {
      refreshOnlineStatus: [Function: refreshOnlineStatus],
      errorChanged: [Function: errorChanged],
      setLayout: [Function: setLayout],
      loadLayout: [Function: loadLayout]
    },
    components: {
      NuxtLoading: [Object]
    },
    context: [Circular],
    '$cmsApi': {
      get: [Function: get]
    },
    '$vStore': {
      posts: [],
      post: [Array],
      articles: [Array],
      currentContentItem: {}
    },
    '$postTest': [],
    '$getPosts': [Function]
  },
  store: Store {
    _committing: false,
    _actions: [Object: null prototype] {
      nuxtServerInit: [Array]
    },
    _actionSubscribers: [],
    _mutations: [Object: null prototype] {
      setMenu: [Array],
      setTestFile: [Array]
    },
    _wrappedGetters: [Object: null prototype] {},
    _modules: ModuleCollection {
      root: [Module]
    },
    _modulesNamespaceMap: [Object: null prototype] {},
    _subscribers: [],
    _watcherVM: Vue {
      _uid: 0,
      _isVue: true,
      '$options': [Object],
      _renderProxy: [Vue],
      _self: [Circular],
      '$parent': undefined,
      '$root': [Circular],
      '$children': [],
      '$refs': {},
      _watcher: null,
      _inactive: null,
      _directInactive: false,
      _isMounted: false,
      _isDestroyed: false,
      _isBeingDestroyed: false,
      _events: [Object: null prototype] {},
      _hasHookEvent: false,
      _vnode: null,
      _staticTrees: null,
      '$vnode': undefined,
      '$slots': {},
      '$scopedSlots': {},
      _c: [Function],
      '$createElement': [Function],
      '$attrs': [Getter/Setter],
      '$listeners': [Getter/Setter],
      _routerRoot: [Circular],
      _watchers: [],
      _data: {}
    },
    dispatch: [Function: boundDispatch],
    commit: [Function: boundCommit],
    strict: true,
    getters: {},
    _vm: Vue {
      _uid: 1,
      _isVue: true,
      '$options': [Object],
      _renderProxy: [Vue],
      _self: [Circular],
      '$parent': undefined,
      '$root': [Circular],
      '$children': [],
      '$refs': {},
      _watcher: null,
      _inactive: null,
      _directInactive: false,
      _isMounted: false,
      _isDestroyed: false,
      _isBeingDestroyed: false,
      _events: [Object: null prototype] {},
      _hasHookEvent: false,
      _vnode: null,
      _staticTrees: null,
      '$vnode': undefined,
      '$slots': {},
      '$scopedSlots': {},
      _c: [Function],
      '$createElement': [Function],
      '$attrs': [Getter/Setter],
      '$listeners': [Getter/Setter],
      _routerRoot: [Circular],
      _watchers: [Array],
      _data: [Object],
      _computedWatchers: [Object: null prototype] {}
    },
    '$router': VueRouter {
      app: [Vue],
      apps: [Array],
      options: [Object],
      beforeHooks: [],
      resolveHooks: [],
      afterHooks: [],
      matcher: [Object],
      fallback: false,
      mode: 'abstract',
      history: [AbstractHistory]
    },
    registerModule: [Function],
    app: {
      router: [VueRouter],
      store: [Circular],
      nuxt: [Object],
      head: [Object],
      render: [Function: render],
      data: [Function: data],
      beforeCreate: [Function: beforeCreate],
      created: [Function: created],
      mounted: [Function: mounted],
      watch: [Object],
      computed: [Object],
      methods: [Object],
      components: [Object],
      context: [Circular],
      '$cmsApi': [Object],
      '$vStore': [Object],
      '$postTest': [],
      '$getPosts': [Function]
    },
    '$cmsApi': {
      get: [Function: get]
    },
    '$vStore': {
      posts: [],
      post: [Array],
      articles: [Array],
      currentContentItem: {}
    },
    '$postTest': [],
    '$getPosts': [Function]
  },
  payload: undefined,
  error: [Function: bound error],
  base: '/',
  env: {
    DEV_MODE: true,
    WS_URL: 'http://localhost:3000'
  },
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList {
        head: null,
        tail: null,
        length: 0
      },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: true,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrain: 0,
      readingMore: true,
      decoder: null,
      encoding: null
    },
    readable: true,
    domain: null,
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _httpMessage: [ServerResponse],
      isModernBrowser: true,
      [Symbol(asyncId)]: 43437,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10782,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43438,
        [Symbol(triggerId)]: 43437
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _httpMessage: [ServerResponse],
      isModernBrowser: true,
      [Symbol(asyncId)]: 43437,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10782,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43438,
        [Symbol(triggerId)]: 43437
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      host: 'localhost:3000',
      connection: 'keep-alive',
      'cache-control': 'max-age=0',
      'upgrade-insecure-requests': '1',
      'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X ' +
        '10_14_2) AppleWebKit/537.36 (KHTML, like ' +
        'Gecko) Chrome/72.0.3626.121 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      referer: 'http://localhost:3000/articles/example-1',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'en-US,en;q=0.9,ru;q=0.8,la;q=0.7',
      cookie: '_ga=GA1.1.415016214.1548537322; ' +
        'io=dlYSsfjpLaRboS6GAAAA',
      'if-none-match': '"7b6e-bzwr5QnNqFW7RF0WgXxH1Knqgm0"'
    },
    rawHeaders: [
      'Host',
      'localhost:3000',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'Upgrade-Insecure-Requests',
      '1',
      'User-Agent',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X ' +
        '10_14_2) AppleWebKit/537.36 (KHTML, like ' +
        'Gecko) Chrome/72.0.3626.121 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Referer',
      'http://localhost:3000/articles/example-1',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'en-US,en;q=0.9,ru;q=0.8,la;q=0.7',
      'Cookie',
      '_ga=GA1.1.415016214.1548537322; ' +
        'io=dlYSsfjpLaRboS6GAAAA',
      'If-None-Match',
      '"7b6e-bzwr5QnNqFW7RF0WgXxH1Knqgm0"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/articles',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _httpMessage: [ServerResponse],
      isModernBrowser: true,
      [Symbol(asyncId)]: 43437,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10782,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43438,
        [Symbol(triggerId)]: 43437
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    originalUrl: '/articles',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/articles',
      path: '/articles',
      href: '/articles',
      _raw: '/articles'
    },
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/articles',
      path: '/articles',
      href: '/articles',
      _raw: '/articles'
    }
  },
  res: ServerResponse {
    domain: null,
    _events: [Object: null prototype] {
      finish: [Function: bound resOnFinish]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    output: [],
    outputEncodings: [],
    outputCallbacks: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _httpMessage: [Circular],
      isModernBrowser: true,
      [Symbol(asyncId)]: 43437,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10782,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43438,
        [Symbol(triggerId)]: 43437
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _httpMessage: [Circular],
      isModernBrowser: true,
      [Symbol(asyncId)]: 43437,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10782,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 43438,
        [Symbol(triggerId)]: 43437
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    locals: {},
    statusCode: 200,
    [Symbol(isCorked)]: false,
    [Symbol(outHeadersKey)]: null
  },
  ssrContext: {
    req: IncomingMessage {
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/articles',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      originalUrl: '/articles',
      _parsedUrl: [Url],
      _parsedOriginalUrl: [Url]
    },
    res: ServerResponse {
      domain: null,
      _events: [Object],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Socket],
      connection: [Socket],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      locals: {},
      statusCode: 200,
      [Symbol(isCorked)]: false,
      [Symbol(outHeadersKey)]: null
    },
    url: '/articles',
    spa: undefined,
    modern: undefined,
    _registeredComponents: Set {},
    redirected: false,
    next: [Function],
    beforeRenderFns: [],
    nuxt: {
      layout: 'default',
      data: [],
      error: null,
      state: null,
      serverRendered: true
    },
    meta: {
      inject: [Function: bound inject],
      refresh: [Function: bound refresh]
    },
    asyncData: {}
  },
  redirect: [Function],
  beforeNuxtRender: [Function],
  next: [Function],
  _redirected: false,
  _errored: false,
  route: {
    name: 'articles',
    meta: [
      {}
    ],
    path: '/articles',
    hash: '',
    query: {},
    params: {},
    fullPath: '/articles',
    matched: [
      [Object]
    ]
  },
  params: {},
  query: {},
  '$cmsApi': {
    get: [Function: get]
  },
  '$vStore': {
    posts: [],
    post: [
      [Object],
      [Object],
      [Object]
    ],
    articles: [
      [Object],
      [Object],
      [Object]
    ],
    currentContentItem: {}
  },
  '$postTest': [],
  '$getPost': [Function],
  '$getPosts': [Function]
}

